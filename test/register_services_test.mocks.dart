// Mocks generated by Mockito 5.4.2 from annotations
// in fudo_flutter_challenge/test/register_services_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:fudo_flutter_challenge/src/common/domain/repositories/toast_service.dart'
    as _i8;
import 'package:fudo_flutter_challenge/src/posts/domain/models/post.dart'
    as _i7;
import 'package:fudo_flutter_challenge/src/posts/domain/repositories/posts_rep.dart'
    as _i6;
import 'package:fudo_flutter_challenge/src/users/domain/models/user.dart'
    as _i5;
import 'package:fudo_flutter_challenge/src/users/domain/repositories/users_rep.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UsersRep].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersRep extends _i1.Mock implements _i3.UsersRep {
  @override
  _i4.Future<_i2.Either<String, List<_i5.User>>> getUsers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<String, List<_i5.User>>>.value(
            _FakeEither_0<String, List<_i5.User>>(
          this,
          Invocation.method(
            #getUsers,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<String, List<_i5.User>>>.value(
                _FakeEither_0<String, List<_i5.User>>(
          this,
          Invocation.method(
            #getUsers,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, List<_i5.User>>>);
  @override
  _i4.Future<List<_i5.User>> getSavedUsers() => (super.noSuchMethod(
        Invocation.method(
          #getSavedUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i5.User>>.value(<_i5.User>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.User>>.value(<_i5.User>[]),
      ) as _i4.Future<List<_i5.User>>);
}

/// A class which mocks [PostsRep].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsRep extends _i1.Mock implements _i6.PostsRep {
  @override
  _i4.Future<_i2.Either<String, List<_i7.Post>>> getPosts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<String, List<_i7.Post>>>.value(
            _FakeEither_0<String, List<_i7.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<String, List<_i7.Post>>>.value(
                _FakeEither_0<String, List<_i7.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, List<_i7.Post>>>);
  @override
  _i4.Future<List<_i7.Post>> getSavedPosts() => (super.noSuchMethod(
        Invocation.method(
          #getSavedPosts,
          [],
        ),
        returnValue: _i4.Future<List<_i7.Post>>.value(<_i7.Post>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i4.Future<List<_i7.Post>>);
}

/// A class which mocks [ToastService].
///
/// See the documentation for Mockito's code generation for more information.
class MockToastService extends _i1.Mock implements _i8.ToastService {
  @override
  void error({
    required String? title,
    String? subtitle,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [],
          {
            #title: title,
            #subtitle: subtitle,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void success({
    required String? title,
    String? subtitle,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #success,
          [],
          {
            #title: title,
            #subtitle: subtitle,
          },
        ),
        returnValueForMissingStub: null,
      );
}
